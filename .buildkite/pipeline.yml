# .buildkite/pipeline.yml

env:
  IMAGE_REPO: "ghcr.io/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
  CONTAINER_NAME: "buildkite-hello-world-go-service"

steps:
  # 步骤 1: 显式登录
  - label: "🔑 Login to GHCR"
    key: "login"
    if: build.pull_request.id == null
    command: |
      echo "--- Logging in to GHCR ---"
      buildkite-agent secret get GHCR_TOKEN | docker login ghcr.io -u "${BUILDKITE_ORGANIZATION_SLUG}" --password-stdin

  # 步骤 2: 构建和推送镜像
  - label: "📦 Build and Push Image"
    key: "build-and-push"
    depends_on: "login"
    if: build.pull_request.id == null
    # 【核心修复】将所有命令合并到一行，用 && 连接，确保在同一个 Shell 进程中执行
    command: |
      set -euo pipefail && \
      echo "--- Generating Image Tag ---" && \
      export COMMIT_SHORT_SHA=$$(echo "$${BUILDKITE_COMMIT}" | cut -c1-8) && \
      export BUILD_DATE=$$(date -u +%Y%m%d) && \
      export IMAGE_TAG="$${BUILD_DATE}.$${BUILDKITE_BRANCH}.$${COMMIT_SHORT_SHA}" && \
      export FULL_IMAGE_NAME="$${IMAGE_REPO}:$${IMAGE_TAG}" && \
      echo "Final Image Tag: $${IMAGE_TAG}" && \
      echo "Full Image Name: $${FULL_IMAGE_NAME}" && \
      echo "--- Building image: $${FULL_IMAGE_NAME} ---" && \
      docker build -t "$${FULL_IMAGE_NAME}" . && \
      echo "--- Pushing image: $${FULL_IMAGE_NAME} ---" && \
      docker push "$${FULL_IMAGE_NAME}" && \
      buildkite-agent meta-data set "image-tag" "$${IMAGE_TAG}"

  # 步骤 3: 手动批准
  - block: "🚀 Deploy to Production"
    fields:
      - text: "Image Tag"
        key: "image-tag-to-deploy"
        default: "$(buildkite-agent meta-data get 'image-tag')"

  # 步骤 4: 执行部署
  - label: "🚀 Executing Deployment"
    command: |
      set -euo pipefail
      IMAGE_TAG=$(buildkite-agent meta-data get "image-tag")
      
      echo "--- Deploying image ${IMAGE_TAG} ---"
      
      buildkite-agent secret get GHCR_TOKEN | docker login ghcr.io -u "${BUILDKITE_ORGANIZATION_SLUG}" --password-stdin

      docker pull "${IMAGE_REPO}:${IMAGE_TAG}"
      docker stop "${CONTAINER_NAME}" || true
      docker rm "${CONTAINER_NAME}" || true
      docker run -d -p 8080:8080 --name "${CONTAINER_NAME}" --restart always "${IMAGE_REPO}:${IMAGE_TAG}"
      
      echo "✅ Deployment successful!"