# .buildkite/pipeline.yml

env:
  IMAGE_REPO: "ghcr.io/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
  CONTAINER_NAME: "hello-world-go-service"

steps:
  # 步骤 1: 显式登录
  - label: "🔑 Login to GHCR"
    if: build.pull_request.id == null
    command: |
      echo "--- Logging in to GHCR ---"
      buildkite-agent secret get GHCR_TOKEN | docker login ghcr.io -u "${BUILDKITE_ORGANIZATION_SLUG}" --password-stdin

  # 步骤 2: 构建和推送镜像
  - label: "📦 Build and Push Image"
    if: build.pull_request.id == null
    depends_on: "🔑 Login to GHCR"
    plugins:
      - docker#v5.10.0:
          # 【核心修复】明确告诉插件要执行构建操作
          # build: . 表示使用当前目录下的 Dockerfile 进行构建
          build: .
          image: "${IMAGE_REPO}"
          push: true
          tag: "${BUILDKITE_DATE_YYYYMMDD}.${BUILDKITE_BRANCH}.${BUILDKITE_COMMIT::8}"
    artifact_paths:
      - "buildkite-meta-data/docker-image-tag"

  # 步骤 3: 手动批准
  - block: "🚀 Deploy to Production"
    fields:
      - text: "Image Tag"
        key: "image-tag-to-deploy"
        default: "$(buildkite-agent artifact download 'buildkite-meta-data/docker-image-tag' --stdout)"

  # 步骤 4: 执行部署
  - label: "🚀 Executing Deployment"
    command: |
      set -euo pipefail
      IMAGE_TAG=$(buildkite-agent artifact download 'buildkite-meta-data/docker-image-tag' --stdout)
      
      echo "--- Deploying image ${IMAGE_TAG} ---"
      
      buildkite-agent secret get GHCR_TOKEN | docker login ghcr.io -u "${BUILDKITE_ORGANIZATION_SLUG}" --password-stdin

      docker pull "${IMAGE_REPO}:${IMAGE_TAG}"
      docker stop "${CONTAINER_NAME}" || true
      docker rm "${CONTAINER_NAME}" || true
      docker run -d -p 8080:8080 --name "${CONTAINER_NAME}" --restart always "${IMAGE_REPO}:${IMAGE_TAG}"
      
      echo "✅ Deployment successful!"