// jenkins/jenkins-cicd/Jenkinsfile-CD

pipeline {
    // 代理：在 Jenkins 主节点上执行所有操作
    agent any

    // 参数：定义流水线接收的参数
    // 这个 IMAGE_TAG 将由 GitHub Actions 在触发时传入
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: '要部署的 Docker 镜像标签')
        // 【新增】定义用于接收 Commit 信息的参数
        string(name: 'COMMIT_AUTHOR', defaultValue: 'N/A', description: '代码提交人')
        string(name: 'COMMIT_MESSAGE', defaultValue: 'N/A', description: '代码提交信息')
        string(name: 'COMMIT_URL', defaultValue: '#', description: '代码提交链接')
    }

    // 环境变量：定义整个流水线中可用的变量，方便管理和修改
    environment {
        // GitHub 镜像仓库地址
        REGISTRY        = 'ghcr.io'
        // 您的 GitHub 用户名（请修改为您的！）
        GITHUB_USERNAME = 'guanqi-lab' // <--- 请修改为您的 GitHub 用户名
        // 镜像的完整名称
        IMAGE_NAME      = "${REGISTRY}/${GITHUB_USERNAME}/jenkins-cicd-eample" // <--- 如果仓库名不同，请修改
        // 部署后容器的名称，方便管理
        CONTAINER_NAME  = 'hello-world-go-service'
    }

    stages {
        // 部署阶段
        stage('Deploy Service') {
            steps {
                script {
                    echo "🚀 Starting deployment for image: ${env.IMAGE_NAME}:${params.IMAGE_TAG}"

                    // 使用 'withCredentials' 块安全地加载凭证
                    // 'github-ghcr-token' 是您在 Jenkins 中存储的 GitHub PAT (Secret text类型)
                    withCredentials([string(credentialsId: 'github-ghcr-token', variable: 'GHCR_TOKEN')]) {
                        
                        // 登录到 GHCR
                        sh "echo ${GHCR_TOKEN} | docker login ${env.REGISTRY} -u ${env.GITHUB_USERNAME} --password-stdin"

                        echo "✅ Docker login successful."

                        // --- 核心部署逻辑 ---

                        echo "🛑 Stopping and removing old container (if it exists)..."
                        // 使用 '|| true' 确保在容器不存在时，命令不会失败并中止流水线
                        sh "docker stop ${env.CONTAINER_NAME} || true"
                        sh "docker rm ${env.CONTAINER_NAME} || true"

                        echo "🚚 Pulling new Docker image..."
                        sh "docker pull ${env.IMAGE_NAME}:${params.IMAGE_TAG}"

                        echo "✨ Starting new container..."
                        sh """
                        docker run -d \
                          -p 28080:28080 \
                          --name ${env.CONTAINER_NAME} \
                          --restart always \
                          ${env.IMAGE_NAME}:${params.IMAGE_TAG}
                        """
                        
                        echo "🎉 Deployment successful!"
                    }
                }
            }
        }
    }

    post {
        // 使用 always 块确保无论成功或失败，都会尝试发送邮件
        always {
            script {
                // 判断当前构建状态
                def currentStatus = currentBuild.result ?: 'SUCCESS'
                def subject, body

                if (currentStatus == 'SUCCESS') {
                    subject = "✅ DEPLOY SUCCESS: Image [${params.IMAGE_TAG}] Deployed"
                    body = """
                    <p><b>部署成功通知</b></p>
                    <p>一个新的镜像已成功部署。</p>
                    <ul>
                        <li><b>作业名称:</b> ${env.JOB_NAME}</li>
                        <li><b>镜像标签:</b> ${params.IMAGE_TAG}</li>
                        <li><b>应用访问地址:</b> <a href="${env.APP_URL}">${env.APP_URL}</a></li>
                        <hr>
                        <li><b>触发来源 (提交人):</b> ${params.COMMIT_AUTHOR}</li>
                        <li><b>提交信息:</b> ${params.COMMIT_MESSAGE}</li>
                        <li><b>相关 Commit:</b> <a href="${params.COMMIT_URL}">点击查看</a></li>
                        <hr>
                        <li><b>Jenkins 构建日志:</b> <a href="${env.BUILD_URL}">点击查看</a></li>
                    </ul>
                    """
                } else {
                    subject = "❌ DEPLOY FAILED: Job [${env.JOB_NAME}]"
                    body = """
                    <p><b>部署失败通知</b></p>
                    <p>在部署过程中发生错误，请立即检查。</p>
                    <ul>
                        <li><b>作业名称:</b> ${env.JOB_NAME}</li>
                        <li><b>尝试部署的镜像:</b> ${params.IMAGE_TAG}</li>
                        <hr>
                        <li><b>触发来源 (提交人):</b> ${params.COMMIT_AUTHOR}</li>
                        <li><b>提交信息:</b> ${params.COMMIT_MESSAGE}</li>
                        <li><b>相关 Commit:</b> <a href="${params.COMMIT_URL}">点击查看</a></li>
                        <hr>
                        <li><b>Jenkins 构建日志:</b> <a href="${env.BUILD_URL}">点击查看详细错误</a></li>
                    </ul>
                    """
                }

                // --- 核心修改：在这里直接提供所有邮件配置 ---
                emailext(
                    to: 'q42722180@gmail.com',
                    subject: subject,
                    body: body,
                    mimeType: 'text/html',
                    // 显式指定 SMTP 配置，绕过全局设置
                    smtpHost: 'smtp.gmail.com',
                    smtpPort: 465,
                    smtpUsername: 'guanqi760@gmail.com', // 您的发件人邮箱
                    smtpPassword: credentials('gmail-app-password'), // 直接通过 ID 调用凭证
                    useSsl: true // 强制使用 SSL
                )
            }
        }
    }
}