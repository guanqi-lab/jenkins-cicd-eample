# .github/workflows/ci-build-and-dispatch.yml

name: CI - Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: guanqi-lab/jenkins-cicd-example # 格式为：your-username/your-repo-name

jobs:
  build-push-and-dispatch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 检出代码
      #    --- 这是本次修改的核心部分 ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 添加 fetch-depth: 0 来获取完整的 Git 历史记录
          # 这样才能确保 {{sha-short}} 变量能被正确解析
          fetch-depth: 0

      # 2. 登录到 GitHub Container Registry (GHCR)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. 动态提取 Docker 镜像的元数据（标签和名称）
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value={{date 'YYYYMMDD'}}.{{branch}}.{{sha-short}},event=branch,priority=200

      # 4. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 5. 远程触发 Jenkins CD 作业
      - name: Trigger Jenkins CD Job
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d ',' -f 1 | sed 's#ghcr.io/${{ env.IMAGE_NAME }}:##')
          echo "Generated Docker tag is: $IMAGE_TAG"
          
          curl -X POST "${{ secrets.JENKINS_URL }}/job/hello-world-cd/buildWithParameters" \
            --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }} \
            --data token="${{ secrets.JENKINS_CD_JOB_TOKEN }}" \
            --data IMAGE_TAG="$IMAGE_TAG"